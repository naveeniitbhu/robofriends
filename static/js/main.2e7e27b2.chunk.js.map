{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","fliteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e7e27b2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5    '>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return(\n        <div>\n            {\n                robots.map((user,i) => {\n                    return (<Card \n                            key={i} \n                            id ={robots[i].id}\n                            name={robots[i].name} \n                            email={robots[i].email}\n                            />\n                    );\n                })\n            }\n        </div>\n    );\n}    \n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue' \n            type='search' \n            placeholder='search robots'\n            onChange={searchChange}\n            />\n            \n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style ={{overflowY:'scroll', border:'5px solid black', height:'500px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport {setSearchField, requestRobots} from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending:state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n};\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n    \n        const {searchField, onSearchChange, robots, isPending} = this.props;\n        const fliteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return isPending ?\n            <h1>Loading</h1> :\n        (\n        <div className='tc'>\n            <h1 className='f1'>RoboFriends</h1>\n            <SearchBox searchChange={onSearchChange}/>\n            <Scroll>\n                <CardList robots={fliteredRobots}/>\n            </Scroll>\n        </div>    \n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n\nconst initialStateSearch = {\n    searchField:''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n          return Object.assign({}, state, {searchField:action.payload});\n        default:\n            return state \n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({},state, {robots: action.payload, isPending:false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({},state, {error: action.payload, isPending:false})\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger(); \n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App/>\n                </Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}